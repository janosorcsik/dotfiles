# Comprehensive Brew and App Store Update
function bu {
  echo "๐บ Starting System Package Updates"
  echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

  # App Store updates
  echo "๐ฑ Checking Mac App Store updates..."
  mas upgrade

  # Homebrew updates
  echo "๐ Updating Homebrew formulae..."
  brew update

  echo "โฌ๏ธ Upgrading Homebrew packages..."
  brew upgrade --fetch-HEAD

  echo "๐ฅ๏ธ Upgrading Homebrew Casks (applications)..."
  brew cu --all --yes --quiet --no-brew-update

  echo "๐งน Cleaning up Homebrew files..."
  brew cleanup -s

  echo "๐๏ธ Removing Homebrew cache..."
  rm -rf "$(brew --cache)"

  echo "๐ฆ Creating Brewfile snapshot of installed packages..."
  brew bundle dump --global --force --describe

  echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
  echo "โจ System updates complete!"

  # Optional: display a summary
  echo "๐ Current system status:"
  echo "โข Homebrew: $(brew --version | head -n 1)"
  echo "โข Packages: $(brew list --formula | wc -l | xargs) formula, $(brew list --cask | wc -l | xargs) casks"
  echo "โข Brewfile: ~/.Brewfile"
}

# Clean up Git branches safely with confirmations
function gclean {
  # Get current repo name and branch for display
  current_repo=$(basename "$(pwd)")
  current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

  # Show clear header with repo info
  echo "๐งน Git Branch Cleanup: $current_repo ($current_branch)"
  echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

  # Verify we're in a git repo before proceeding
  if [ ! -d ".git" ]; then
    echo "โ Error: Not in a Git repository. Please run this from a Git repo."
    return 1
  fi

  # 1. Remote merged branches
  echo "๐ Checking remote-tracking merged branches..."
  merged_remotes=$(git branch -r --merged | grep -Ev '\*|main|master|develop|release' | sed 's/origin\///')

  if [[ -n "$merged_remotes" ]]; then
    echo "   Found merged remote branches:"
    echo "$merged_remotes" | while read -r branch; do
      echo "   โข $branch"
    done

    echo -n "โ Delete these remote merged branches in '$current_repo'? (y/n) "
    read confirm_remote
    if [[ "$confirm_remote" == [yY] ]]; then
      echo "$merged_remotes" | while read -r branch; do
        echo "   โ๏ธ Deleting remote branch: $branch"
        git push --delete origin "$branch"
      done
    else
      echo "   โ Remote branches were kept."
    fi
  else
    echo "   โ No remote-tracking merged branches found."
  fi

  # 2. Prune and check for gone branches
  echo "๐ Pruning references to deleted remote branches..."
  git fetch --prune

  echo "๐ Checking for gone-tracking local branches..."
  # Mรณdosรญtott sor - kizรกrjuk az aktuรกlis รกgat (ami *-gal jelรถlt)
  gone_locals=$(git branch -vv | grep -v '^\*' | grep 'origin/.*: gone]' | awk '{print $1}')

  if [[ -n "$gone_locals" ]]; then
    echo "   Found local branches tracking deleted remotes:"
    echo "$gone_locals" | while read -r branch; do
      echo "   โข $branch"
    done

    echo -n "โ Delete these local branches in '$current_repo'? (y/n) "
    read confirm_gone
    if [[ "$confirm_gone" == [yY] ]]; then
      echo "$gone_locals" | while read -r branch; do
        echo "   โ๏ธ Deleting local branch: $branch"
        git branch -D "$branch"
      done
    else
      echo "   โ Local branches were kept."
    fi
  else
    echo "   โ No local branches tracking deleted remotes."
  fi

  # 3. Orphan branches
  echo "๐ Checking for local orphan branches..."
  # Mรณdosรญtott sor - kizรกrjuk az aktuรกlis รกgat
  orphans=$(git for-each-ref --format='%(refname:short) %(upstream:short)' refs/heads |
            awk -v current="$current_branch" '$2 == "" && $1 != current {print $1}')

  if [[ -n "$orphans" ]]; then
    echo "   Found local branches with no remote tracking:"
    echo "$orphans" | while read -r branch; do
      echo "   โข $branch"
    done

    echo -n "โ Delete these orphan branches in '$current_repo'? (y/n) "
    read confirm_orphan
    if [[ "$confirm_orphan" == [yY] ]]; then
      echo "$orphans" | while read -r branch; do
        echo "   โ๏ธ Deleting orphan branch: $branch"
        git branch -D "$branch"
      done
    else
      echo "   โ Orphan branches were kept."
    fi
  else
    echo "   โ No orphan branches found."
  fi

  echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
  echo "โจ Git branch cleanup complete for $current_repo"
}

# Clean all Git repositories in subfolders
function gcleanall {
  for dir in */; do
    if [ -d "$dir/.git" ]; then
      # Get repo branch info
      branch=$(git -C "$dir" rev-parse --abbrev-ref HEAD 2>/dev/null)
      echo "๐ Checking repo: $dir ($branch)"

      echo -n "โ Clean branches in '$dir'? (y/n) "
      read confirm
      if [[ "$confirm" == [yY] ]]; then
        # Change to directory and run the cleaning
        (cd "$dir" && gclean)
        echo ""
      else
        echo "   โฉ Skipping $dir"
        echo ""
      fi
    fi
  done

  echo "โ Finished cleaning all repositories"
}

# Fetch all Git repositories in subfolders
function gfall {
  echo "๐ Fetching updates for all repositories"
  echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

  for dir in */; do
    if [ -d "$dir/.git" ]; then
      branch=$(git -C "$dir" rev-parse --abbrev-ref HEAD 2>/dev/null)
      echo "โข $dir ($branch)"
      git -C "$dir" fetch
    fi
  done

  echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
  echo "โ Fetch complete for all repositories"
}

# Pull all Git repositories in subfolders
function gpall {
  echo "โฌ๏ธ Pulling updates for all repositories"
  echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

  for dir in */; do
    if [ -d "$dir/.git" ]; then
      branch=$(git -C "$dir" rev-parse --abbrev-ref HEAD 2>/dev/null)
      echo "โข $dir ($branch)"
      git -C "$dir" pull
    fi
  done

  echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
  echo "โ Pull complete for all repositories"
}
