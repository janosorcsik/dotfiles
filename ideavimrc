" leader key
let mapleader = ' '
nnoremap <Space> <Nop>

" relative line numbers
set number
set relativenumber

set scrolloff=8
set notimeout

nnoremap <Esc> :nohlsearch<CR>

" case-insensitive search
set ignorecase
" enable case-sensitive search when uppercased letter is present
set smartcase
" search while typing
set incsearch

set cursorline

" smart line joining
set ideajoin

" move line up/down
nnoremap <D-j> :m .+1<CR>==
nnoremap <D-k> :m .-2<CR>==
inoremap <D-j> <Esc>:m .+1<CR>==gi
inoremap <D-k> <Esc>:m .-2<CR>==gi
vnoremap <D-j> :m '>+1<CR>gv=gv
vnoremap <D-k> :m '<-2<CR>gv=gv

" center the content
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
nnoremap n nzzzv
nnoremap N Nzzzv

nnoremap <S-h> :bp<CR>
nnoremap <S-l> :bn<CR>

" window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" file navigation (matching nvim snacks.nvim)
map <Leader>ff <Action>(GotoFile)
map <Leader>fg <Action>(RecentFiles)
map <Leader>b <Action>(Switcher)
map <Leader>e <Action>(SelectInProjectView)
map <Leader>sg <Action>(FindInPath)

set highlightedyank
set NERDTree
set surround
set which-key

nmap ds <Plug>Dsurround
nmap cs <Plug>Csurround
nmap ys <Plug>Ysurround

nmap gcc <Action>(CommentByLineComment)
vmap gcc <Action>(CommentByLineComment)

" Code actions
nmap <Leader>c <Action>(ShowIntentionActions)

" Rename symbol
nmap <Leader>r <Action>(RenameElement)

" Go to definition
nmap gd <Action>(GotoDeclaration)

" Go to implementation
nmap gi <Action>(GotoImplementation)

" Go to references
nmap gr <Action>(FindUsages)

" Go to type definition
nmap gt <Action>(GotoTypeDeclaration)

set functiontextobj
